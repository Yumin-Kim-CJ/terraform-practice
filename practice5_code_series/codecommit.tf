data "aws_iam_role" "build_role" {
  name = var.build_service_role
}

data "aws_iam_role" "ecs_task_role" {
  name = "ecsTaskExecutionRole"
}

### Elastic Container Registry ###
resource "aws_ecr_repository" "image_repo" {
  name = var.ecr_name

  image_scanning_configuration {
    scan_on_push = var.ecr_image_scan
  }

  #   encryption_configuration {
  #     encryption_type = "KMS"
  #     kms_key         = ""
  #   }
}

# output "image_repo_url" {
#   value = aws_ecr_repository.image_repo.repository_url
# }

# output "image_repo_arn" {
#   value = aws_ecr_repository.image_repo.arn
# }

### Code Commit ###
resource "aws_codecommit_repository" "codecommit-repository" {
  repository_name = var.repo_name
  default_branch  = var.default_branch
  description     = var.repo_description

  tags = {
    name = var.repo_name
  }
}

### Code Build ###
resource "aws_codebuild_project" "codebuild" {
  name         = var.build_project_name
  service_role = data.aws_iam_role.build_role.arn
  description  = var.build_project_description

  source {
    type     = var.build_provider
    location = aws_codecommit_repository.codecommit-repository.clone_url_http
  }

  environment {
    compute_type                = var.build_env_compute_type
    image                       = var.build_image
    type                        = var.build_type
    privileged_mode             = var.build_is_privileged_mode
    image_pull_credentials_type = var.build_credentials_type

    # environment_variable {
    #   name  = "REPOSITORY_URI"
    #   value = aws_ecr_repository.image_repo.repository_url
    # }
  }

  artifacts {
    type = var.build_artifacts_type
  }

  logs_config {
    cloudwatch_logs {
      status = var.build_cloudwatch_log_status
    }
  }

  tags = {
    name = var.build_project_name
  }

}

### Elastic Container Service ###
resource "aws_ecs_task_definition" "ecs_task_definition" {
  family                   = "td-con-ojt"
  network_mode             = "awsvpc"
  requires_compatibilities = ["FARGATE"]
  cpu                      = 256
  memory                   = 512
  task_role_arn            = data.aws_iam_role.ecs_task_role.arn
  execution_role_arn       = data.aws_iam_role.ecs_task_role.arn

  container_definitions = jsonencode([
    {
      name      = "con-con-ojt",
      image     = "${aws_ecr_repository.image_repo.arn}"
      cpu       = 128
      memory    = 128
      essential = true
      portMappings = [
        {
          containerPort = 80
        }
      ]
    }
  ])

  runtime_platform {
    operating_system_family = "LINUX"
    cpu_architecture        = "X86_64"
  }

}


### ECS Cluster ###
resource "aws_ecs_cluster" "ecs_cluster" {
  name = "cst-con-ojt"

  tags = {
    name = "cst-con-ojt"
  }
}


### ECS Service ###
resource "aws_ecs_service" "ecs_service" {
  name                              = "Service-${var.name}"
  cluster                           = aws_ecs_cluster.ecs_cluster.id
  task_definition                   = aws_ecs_task_definition.ecs_task_definition.arn
  desired_count                     = var.desired_tasks
  health_check_grace_period_seconds = 10
  launch_type                       = "FARGATE"
  iam_role                          = aws_iam_role.foo.arn
  depends_on                        = [aws_iam_role_policy.foo]

  network_configuration {
    security_groups = [var.arn_security_group]
    subnets         = [var.subnets_id[0], var.subnets_id[1]]
  }

  load_balancer {
    target_group_arn = var.arn_target_group
    container_name   = var.container_name
    container_port   = var.container_port
  }

  deployment_controller {
    type = "CODE_DEPLOY"
  }

  lifecycle {
    // to avoid changes generated by autoscaling or new CodeDeploy changes
    ignore_changes = [desired_count, task_definition, load_balancer]
  }

}

# resource "aws_ecs_service" "ecs_service" {
#   name            = "mongodb"
#   desired_count   = 3

#   ordered_placement_strategy {
#     type  = "binpack"
#     field = "cpu"
#   }

#   load_balancer {
#     target_group_arn = aws_alb_target_group.tgp_web_80.arn
#     container_name   = "mongo"
#     container_port   = 80
#   }

#   placement_constraints {
#     type       = "memberOf"
#     expression = "attribute:ecs.availability-zone in [us-west-2a, us-west-2b]"
#   }
# }
